// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: torepo/torepo.proto

package torepo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// B2B2BServiceClient is the client API for B2B2BService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type B2B2BServiceClient interface {
	NewEntity(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*NewEntityReply, error)
	ListEntity(ctx context.Context, in *Tkn, opts ...grpc.CallOption) (B2B2BService_ListEntityClient, error)
	NewOrigin(ctx context.Context, in *Origin, opts ...grpc.CallOption) (*NewOriginReply, error)
	NewObligation(ctx context.Context, in *Obligation, opts ...grpc.CallOption) (*NewObligationReply, error)
	ListObligation(ctx context.Context, in *Tkn, opts ...grpc.CallOption) (B2B2BService_ListObligationClient, error)
}

type b2B2BServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewB2B2BServiceClient(cc grpc.ClientConnInterface) B2B2BServiceClient {
	return &b2B2BServiceClient{cc}
}

func (c *b2B2BServiceClient) NewEntity(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*NewEntityReply, error) {
	out := new(NewEntityReply)
	err := c.cc.Invoke(ctx, "/torepo.B2b2bService/NewEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *b2B2BServiceClient) ListEntity(ctx context.Context, in *Tkn, opts ...grpc.CallOption) (B2B2BService_ListEntityClient, error) {
	stream, err := c.cc.NewStream(ctx, &B2B2BService_ServiceDesc.Streams[0], "/torepo.B2b2bService/ListEntity", opts...)
	if err != nil {
		return nil, err
	}
	x := &b2B2BServiceListEntityClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type B2B2BService_ListEntityClient interface {
	Recv() (*Entity, error)
	grpc.ClientStream
}

type b2B2BServiceListEntityClient struct {
	grpc.ClientStream
}

func (x *b2B2BServiceListEntityClient) Recv() (*Entity, error) {
	m := new(Entity)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *b2B2BServiceClient) NewOrigin(ctx context.Context, in *Origin, opts ...grpc.CallOption) (*NewOriginReply, error) {
	out := new(NewOriginReply)
	err := c.cc.Invoke(ctx, "/torepo.B2b2bService/NewOrigin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *b2B2BServiceClient) NewObligation(ctx context.Context, in *Obligation, opts ...grpc.CallOption) (*NewObligationReply, error) {
	out := new(NewObligationReply)
	err := c.cc.Invoke(ctx, "/torepo.B2b2bService/NewObligation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *b2B2BServiceClient) ListObligation(ctx context.Context, in *Tkn, opts ...grpc.CallOption) (B2B2BService_ListObligationClient, error) {
	stream, err := c.cc.NewStream(ctx, &B2B2BService_ServiceDesc.Streams[1], "/torepo.B2b2bService/ListObligation", opts...)
	if err != nil {
		return nil, err
	}
	x := &b2B2BServiceListObligationClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type B2B2BService_ListObligationClient interface {
	Recv() (*Obligation, error)
	grpc.ClientStream
}

type b2B2BServiceListObligationClient struct {
	grpc.ClientStream
}

func (x *b2B2BServiceListObligationClient) Recv() (*Obligation, error) {
	m := new(Obligation)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// B2B2BServiceServer is the server API for B2B2BService service.
// All implementations must embed UnimplementedB2B2BServiceServer
// for forward compatibility
type B2B2BServiceServer interface {
	NewEntity(context.Context, *Entity) (*NewEntityReply, error)
	ListEntity(*Tkn, B2B2BService_ListEntityServer) error
	NewOrigin(context.Context, *Origin) (*NewOriginReply, error)
	NewObligation(context.Context, *Obligation) (*NewObligationReply, error)
	ListObligation(*Tkn, B2B2BService_ListObligationServer) error
	mustEmbedUnimplementedB2B2BServiceServer()
}

// UnimplementedB2B2BServiceServer must be embedded to have forward compatible implementations.
type UnimplementedB2B2BServiceServer struct {
}

func (UnimplementedB2B2BServiceServer) NewEntity(context.Context, *Entity) (*NewEntityReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewEntity not implemented")
}
func (UnimplementedB2B2BServiceServer) ListEntity(*Tkn, B2B2BService_ListEntityServer) error {
	return status.Errorf(codes.Unimplemented, "method ListEntity not implemented")
}
func (UnimplementedB2B2BServiceServer) NewOrigin(context.Context, *Origin) (*NewOriginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewOrigin not implemented")
}
func (UnimplementedB2B2BServiceServer) NewObligation(context.Context, *Obligation) (*NewObligationReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewObligation not implemented")
}
func (UnimplementedB2B2BServiceServer) ListObligation(*Tkn, B2B2BService_ListObligationServer) error {
	return status.Errorf(codes.Unimplemented, "method ListObligation not implemented")
}
func (UnimplementedB2B2BServiceServer) mustEmbedUnimplementedB2B2BServiceServer() {}

// UnsafeB2B2BServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to B2B2BServiceServer will
// result in compilation errors.
type UnsafeB2B2BServiceServer interface {
	mustEmbedUnimplementedB2B2BServiceServer()
}

func RegisterB2B2BServiceServer(s grpc.ServiceRegistrar, srv B2B2BServiceServer) {
	s.RegisterService(&B2B2BService_ServiceDesc, srv)
}

func _B2B2BService_NewEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Entity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(B2B2BServiceServer).NewEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/torepo.B2b2bService/NewEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(B2B2BServiceServer).NewEntity(ctx, req.(*Entity))
	}
	return interceptor(ctx, in, info, handler)
}

func _B2B2BService_ListEntity_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Tkn)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(B2B2BServiceServer).ListEntity(m, &b2B2BServiceListEntityServer{stream})
}

type B2B2BService_ListEntityServer interface {
	Send(*Entity) error
	grpc.ServerStream
}

type b2B2BServiceListEntityServer struct {
	grpc.ServerStream
}

func (x *b2B2BServiceListEntityServer) Send(m *Entity) error {
	return x.ServerStream.SendMsg(m)
}

func _B2B2BService_NewOrigin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Origin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(B2B2BServiceServer).NewOrigin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/torepo.B2b2bService/NewOrigin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(B2B2BServiceServer).NewOrigin(ctx, req.(*Origin))
	}
	return interceptor(ctx, in, info, handler)
}

func _B2B2BService_NewObligation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Obligation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(B2B2BServiceServer).NewObligation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/torepo.B2b2bService/NewObligation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(B2B2BServiceServer).NewObligation(ctx, req.(*Obligation))
	}
	return interceptor(ctx, in, info, handler)
}

func _B2B2BService_ListObligation_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Tkn)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(B2B2BServiceServer).ListObligation(m, &b2B2BServiceListObligationServer{stream})
}

type B2B2BService_ListObligationServer interface {
	Send(*Obligation) error
	grpc.ServerStream
}

type b2B2BServiceListObligationServer struct {
	grpc.ServerStream
}

func (x *b2B2BServiceListObligationServer) Send(m *Obligation) error {
	return x.ServerStream.SendMsg(m)
}

// B2B2BService_ServiceDesc is the grpc.ServiceDesc for B2B2BService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var B2B2BService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "torepo.B2b2bService",
	HandlerType: (*B2B2BServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewEntity",
			Handler:    _B2B2BService_NewEntity_Handler,
		},
		{
			MethodName: "NewOrigin",
			Handler:    _B2B2BService_NewOrigin_Handler,
		},
		{
			MethodName: "NewObligation",
			Handler:    _B2B2BService_NewObligation_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListEntity",
			Handler:       _B2B2BService_ListEntity_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListObligation",
			Handler:       _B2B2BService_ListObligation_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "torepo/torepo.proto",
}
